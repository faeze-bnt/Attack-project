from tensorflow.keras import backend as K
import tensorflow as tf
#===================================================================================
def Stochastic_SNG_Sobol(In_tv, Sobol_seq_num, Str_Len):
	
	#Sobol Seq 1
	#256
	A = K.constant([0/256, 128/256, 64/256, 192/256, 32/256, 160/256, 96/256, 224/256, 16/256, 144/256, 80/256, 208/256, 48/256, 176/256, 112/256, 240/256, 8/256, 136/256, 72/256, 200/256, 40/256, 168/256, 104/256, 232/256, 24/256, 152/256, 88/256, 216/256, 56/256, 184/256, 120/256, 248/256, 4/256, 132/256, 68/256, 196/256, 36/256, 164/256, 100/256, 228/256, 20/256, 148/256, 84/256, 212/256, 52/256, 180/256, 116/256, 244/256, 12/256, 140/256, 76/256, 204/256, 44/256, 172/256, 108/256, 236/256, 28/256, 156/256, 92/256, 220/256, 60/256, 188/256, 124/256, 252/256, 2/256, 130/256, 66/256, 194/256, 34/256, 162/256, 98/256, 226/256, 18/256, 146/256, 82/256, 210/256, 50/256, 178/256, 114/256, 242/256, 10/256, 138/256, 74/256, 202/256, 42/256, 170/256, 106/256, 234/256, 26/256, 154/256, 90/256, 218/256, 58/256, 186/256, 122/256, 250/256, 6/256, 134/256, 70/256, 198/256, 38/256, 166/256, 102/256, 230/256, 22/256, 150/256, 86/256, 214/256, 54/256, 182/256, 118/256, 246/256, 14/256, 142/256, 78/256, 206/256, 46/256, 174/256, 110/256, 238/256, 30/256, 158/256, 94/256, 222/256, 62/256, 190/256, 126/256, 254/256, 1/256, 129/256, 65/256, 193/256, 33/256, 161/256, 97/256, 225/256, 17/256, 145/256, 81/256, 209/256, 49/256, 177/256, 113/256, 241/256, 9/256, 137/256, 73/256, 201/256, 41/256, 169/256, 105/256, 233/256, 25/256, 153/256, 89/256, 217/256, 57/256, 185/256, 121/256, 249/256, 5/256, 133/256, 69/256, 197/256, 37/256, 165/256, 101/256, 229/256, 21/256, 149/256, 85/256, 213/256, 53/256, 181/256, 117/256, 245/256, 13/256, 141/256, 77/256, 205/256, 45/256, 173/256, 109/256, 237/256, 29/256, 157/256, 93/256, 221/256, 61/256, 189/256, 125/256, 253/256, 3/256, 131/256, 67/256, 195/256, 35/256, 163/256, 99/256, 227/256, 19/256, 147/256, 83/256, 211/256, 51/256, 179/256, 115/256, 243/256, 11/256, 139/256, 75/256, 203/256, 43/256, 171/256, 107/256, 235/256, 27/256, 155/256, 91/256, 219/256, 59/256, 187/256, 123/256, 251/256, 7/256, 135/256, 71/256, 199/256, 39/256, 167/256, 103/256, 231/256, 23/256, 151/256, 87/256, 215/256, 55/256, 183/256, 119/256, 247/256, 15/256, 143/256, 79/256, 207/256, 47/256, 175/256, 111/256, 239/256, 31/256, 159/256, 95/256, 223/256, 63/256, 191/256, 127/256, 255/256],dtype='float32');
	#Sobol Seq 2
	#256
	B = K.constant([0/256, 128/256, 192/256, 64/256, 160/256, 32/256, 96/256, 224/256, 240/256, 112/256, 48/256, 176/256, 80/256, 208/256, 144/256, 16/256, 136/256, 8/256, 72/256, 200/256, 40/256, 168/256, 232/256, 104/256, 120/256, 248/256, 184/256, 56/256, 216/256, 88/256, 24/256, 152/256, 204/256, 76/256, 12/256, 140/256, 108/256, 236/256, 172/256, 44/256, 60/256, 188/256, 252/256, 124/256, 156/256, 28/256, 92/256, 220/256, 68/256, 196/256, 132/256, 4/256, 228/256, 100/256, 36/256, 164/256, 180/256, 52/256, 116/256, 244/256, 20/256, 148/256, 212/256, 84/256, 170/256, 42/256, 106/256, 234/256, 10/256, 138/256, 202/256, 74/256, 90/256, 218/256, 154/256, 26/256, 250/256, 122/256, 58/256, 186/256, 34/256, 162/256, 226/256, 98/256, 130/256, 2/256, 66/256, 194/256, 210/256, 82/256, 18/256, 146/256, 114/256, 242/256, 178/256, 50/256, 102/256, 230/256, 166/256, 38/256, 198/256, 70/256, 6/256, 134/256, 150/256, 22/256, 86/256, 214/256, 54/256, 182/256, 246/256, 118/256, 238/256, 110/256, 46/256, 174/256, 78/256, 206/256, 142/256, 14/256, 30/256, 158/256, 222/256, 94/256, 190/256, 62/256, 126/256, 254/256, 255/256, 127/256, 63/256, 191/256, 95/256, 223/256, 159/256, 31/256, 15/256, 143/256, 207/256, 79/256, 175/256, 47/256, 111/256, 239/256, 119/256, 247/256, 183/256, 55/256, 215/256, 87/256, 23/256, 151/256, 135/256, 7/256, 71/256, 199/256, 39/256, 167/256, 231/256, 103/256, 51/256, 179/256, 243/256, 115/256, 147/256, 19/256, 83/256, 211/256, 195/256, 67/256, 3/256, 131/256, 99/256, 227/256, 163/256, 35/256, 187/256, 59/256, 123/256, 251/256, 27/256, 155/256, 219/256, 91/256, 75/256, 203/256, 139/256, 11/256, 235/256, 107/256, 43/256, 171/256, 85/256, 213/256, 149/256, 21/256, 245/256, 117/256, 53/256, 181/256, 165/256, 37/256, 101/256, 229/256, 5/256, 133/256, 197/256, 69/256, 221/256, 93/256, 29/256, 157/256, 125/256, 253/256, 189/256, 61/256, 45/256, 173/256, 237/256, 109/256, 141/256, 13/256, 77/256, 205/256, 153/256, 25/256, 89/256, 217/256, 57/256, 185/256, 249/256, 121/256, 105/256, 233/256, 169/256, 41/256, 201/256, 73/256, 9/256, 137/256, 17/256, 145/256, 209/256, 81/256, 177/256, 49/256, 113/256, 241/256, 225/256, 97/256, 33/256, 161/256, 65/256, 193/256, 129/256, 1/256],dtype='float32');
	#Sobol Seq 3
	#256
	C = K.constant([0/256, 128/256, 64/256, 192/256, 224/256, 96/256, 160/256, 32/256, 176/256, 48/256, 240/256, 112/256, 80/256, 208/256, 16/256, 144/256, 104/256, 232/256, 40/256, 168/256, 136/256, 8/256, 200/256, 72/256, 216/256, 88/256, 152/256, 24/256, 56/256, 184/256, 120/256, 248/256, 244/256, 116/256, 180/256, 52/256, 20/256, 148/256, 84/256, 212/256, 68/256, 196/256, 4/256, 132/256, 164/256, 36/256, 228/256, 100/256, 156/256, 28/256, 220/256, 92/256, 124/256, 252/256, 60/256, 188/256, 44/256, 172/256, 108/256, 236/256, 204/256, 76/256, 140/256, 12/256, 134/256, 6/256, 198/256, 70/256, 102/256, 230/256, 38/256, 166/256, 54/256, 182/256, 118/256, 246/256, 214/256, 86/256, 150/256, 22/256, 238/256, 110/256, 174/256, 46/256, 14/256, 142/256, 78/256, 206/256, 94/256, 222/256, 30/256, 158/256, 190/256, 62/256, 254/256, 126/256, 114/256, 242/256, 50/256, 178/256, 146/256, 18/256, 210/256, 82/256, 194/256, 66/256, 130/256, 2/256, 34/256, 162/256, 98/256, 226/256, 26/256, 154/256, 90/256, 218/256, 250/256, 122/256, 186/256, 58/256, 170/256, 42/256, 234/256, 106/256, 74/256, 202/256, 10/256, 138/256, 79/256, 207/256, 15/256, 143/256, 175/256, 47/256, 239/256, 111/256, 255/256, 127/256, 191/256, 63/256, 31/256, 159/256, 95/256, 223/256, 39/256, 167/256, 103/256, 231/256, 199/256, 71/256, 135/256, 7/256, 151/256, 23/256, 215/256, 87/256, 119/256, 247/256, 55/256, 183/256, 187/256, 59/256, 251/256, 123/256, 91/256, 219/256, 27/256, 155/256, 11/256, 139/256, 75/256, 203/256, 235/256, 107/256, 171/256, 43/256, 211/256, 83/256, 147/256, 19/256, 51/256, 179/256, 115/256, 243/256, 99/256, 227/256, 35/256, 163/256, 131/256, 3/256, 195/256, 67/256, 201/256, 73/256, 137/256, 9/256, 41/256, 169/256, 105/256, 233/256, 121/256, 249/256, 57/256, 185/256, 153/256, 25/256, 217/256, 89/256, 161/256, 33/256, 225/256, 97/256, 65/256, 193/256, 1/256, 129/256, 17/256, 145/256, 81/256, 209/256, 241/256, 113/256, 177/256, 49/256, 61/256, 189/256, 125/256, 253/256, 221/256, 93/256, 157/256, 29/256, 141/256, 13/256, 205/256, 77/256, 109/256, 237/256, 45/256, 173/256, 85/256, 213/256, 21/256, 149/256, 181/256, 53/256, 245/256, 117/256, 229/256, 101/256, 165/256, 37/256, 5/256, 133/256, 69/256, 197/256],dtype='float32');	
	#Sobol Seq 4
	#256
	D = K.constant([0/256, 128/256, 192/256, 64/256, 224/256, 96/256, 32/256, 160/256, 80/256, 208/256, 144/256, 16/256, 176/256, 48/256, 112/256, 240/256, 56/256, 184/256, 248/256, 120/256, 216/256, 88/256, 24/256, 152/256, 104/256, 232/256, 168/256, 40/256, 136/256, 8/256, 72/256, 200/256, 172/256, 44/256, 108/256, 236/256, 76/256, 204/256, 140/256, 12/256, 252/256, 124/256, 60/256, 188/256, 28/256, 156/256, 220/256, 92/256, 148/256, 20/256, 84/256, 212/256, 116/256, 244/256, 180/256, 52/256, 196/256, 68/256, 4/256, 132/256, 36/256, 164/256, 228/256, 100/256, 98/256, 226/256, 162/256, 34/256, 130/256, 2/256, 66/256, 194/256, 50/256, 178/256, 242/256, 114/256, 210/256, 82/256, 18/256, 146/256, 90/256, 218/256, 154/256, 26/256, 186/256, 58/256, 122/256, 250/256, 10/256, 138/256, 202/256, 74/256, 234/256, 106/256, 42/256, 170/256, 206/256, 78/256, 14/256, 142/256, 46/256, 174/256, 238/256, 110/256, 158/256, 30/256, 94/256, 222/256, 126/256, 254/256, 190/256, 62/256, 246/256, 118/256, 54/256, 182/256, 22/256, 150/256, 214/256, 86/256, 166/256, 38/256, 102/256, 230/256, 70/256, 198/256, 134/256, 6/256, 147/256, 19/256, 83/256, 211/256, 115/256, 243/256, 179/256, 51/256, 195/256, 67/256, 3/256, 131/256, 35/256, 163/256, 227/256, 99/256, 171/256, 43/256, 107/256, 235/256, 75/256, 203/256, 139/256, 11/256, 251/256, 123/256, 59/256, 187/256, 27/256, 155/256, 219/256, 91/256, 63/256, 191/256, 255/256, 127/256, 223/256, 95/256, 31/256, 159/256, 111/256, 239/256, 175/256, 47/256, 143/256, 15/256, 79/256, 207/256, 7/256, 135/256, 199/256, 71/256, 231/256, 103/256, 39/256, 167/256, 87/256, 215/256, 151/256, 23/256, 183/256, 55/256, 119/256, 247/256, 241/256, 113/256, 49/256, 177/256, 17/256, 145/256, 209/256, 81/256, 161/256, 33/256, 97/256, 225/256, 65/256, 193/256, 129/256, 1/256, 201/256, 73/256, 9/256, 137/256, 41/256, 169/256, 233/256, 105/256, 153/256, 25/256, 89/256, 217/256, 121/256, 249/256, 185/256, 57/256, 93/256, 221/256, 157/256, 29/256, 189/256, 61/256, 125/256, 253/256, 13/256, 141/256, 205/256, 77/256, 237/256, 109/256, 45/256, 173/256, 101/256, 229/256, 165/256, 37/256, 133/256, 5/256, 69/256, 197/256, 53/256, 181/256, 245/256, 117/256, 213/256, 85/256, 21/256, 149/256],dtype='float32');		
    
	#Sobol Seq 2,5
	#64
	S2 = K.constant([0/128,64/128,32/128,96/128,48/128,112/128,16/128,80/128,40/128,104/128,8/128,72/128,24/128,88/128,56/128,120/128,60/128,124/128,28/128,92/128,12/128,76/128,44/128,108/128,20/128,84/128,52/128,116/128,36/128,100/128,4/128,68/128,34/128,98/128,2/128,66/128,18/128,82/128,50/128,114/128,10/128,74/128,42/128,106/128,58/128,122/128,26/128,90/128,30/128,94/128,62/128,126/128,46/128,110/128,14/128,78/128,54/128,118/128,22/128,86/128,6/128,70/128,38/128,102/128],dtype='float32');		
	S5 = K.constant([0/128,64/128,96/128,32/128,112/128,48/128,16/128,80/128,72/128,8/128,40/128,104/128,56/128,120/128,88/128,24/128,36/128,100/128,68/128,4/128,84/128,20/128,52/128,116/128,108/128,44/128,12/128,76/128,28/128,92/128,124/128,60/128,90/128,26/128,58/128,122/128,42/128,106/128,74/128,10/128,18/128,82/128,114/128,50/128,98/128,34/128,2/128,66/128,126/128,62/128,30/128,94/128,14/128,78/128,110/128,46/128,54/128,118/128,86/128,22/128,70/128,6/128,38/128,102/128],dtype='float32');		
	#--Merge all arrays into one matrix
	temp=[]
	if (Sobol_seq_num==1):
		for i in range (0,Str_Len):
			comp1 = K.greater(K.abs(In_tv), A[i])
			comp2 = K.cast(comp1,dtype='float32')
			comp3 = tf.multiply(K.sign(In_tv),comp2)
			temp.append(comp3)
	if (Sobol_seq_num==2):
		for i in range (0,Str_Len):
			comp1 = K.greater(K.abs(In_tv), B[i])
			comp2 = K.cast(comp1,dtype='float32')
			comp3 = tf.multiply(K.sign(In_tv),comp2)
			temp.append(comp3)
	if (Sobol_seq_num==3):
		for i in range (0,Str_Len):
			comp = K.greater(K.abs(In_tv), C[i])
			comp = K.cast(comp,dtype='float32')
			comp = tf.multiply(K.sign(In_tv),comp)
			temp.append(comp)
	if (Sobol_seq_num==4):
		for i in range (0,Str_Len):
			comp = K.greater(K.abs(In_tv), D[i])
			comp = K.cast(comp,dtype='float32')
			comp = tf.multiply(K.sign(In_tv),comp)
			temp.append(comp)
	if (Sobol_seq_num==22):
		for i in range (0,Str_Len):
			comp = K.greater(K.abs(In_tv), S2[i])
			comp = K.cast(comp,dtype='float32')
			comp = tf.multiply(K.sign(In_tv),comp)
			temp.append(comp)
	if (Sobol_seq_num==55):
		for i in range (0,Str_Len):
			comp = K.greater(K.abs(In_tv), S5[i])
			comp = K.cast(comp,dtype='float32')
			comp = tf.multiply(K.sign(In_tv),comp)
			temp.append(comp)			
	Stream = K.stack(temp)
	#print('Stream.shape',Stream.shape)
	return Stream 	
#===================================================================================
def Stochastic_SNG_A(A_tv, Str_Len, SNG_num1):	

	A_stream = Stochastic_SNG_Sobol(A_tv, SNG_num1, Str_Len)
	A_stream = K.permute_dimensions(A_stream,(1,2,3,0,4))
	A_stream = K.reshape(A_stream, [-1, A_tv.shape[1], A_tv.shape[2], (Str_Len*A_tv.shape[3])])

	return A_stream
#===================================================================================
def Stochastic_SNG_B(B_tv,Str_Len, SNG_num2):	

	B_stream = Stochastic_SNG_Sobol(B_tv, SNG_num2, Str_Len)
	B_stream = K.permute_dimensions(B_stream,(1,2,0,3,4))
	B_stream = K.reshape(B_stream, [B_tv.shape[0], B_tv.shape[1], (Str_Len*B_tv.shape[2]), B_tv.shape[3]])
	
	return B_stream
#===================================================================================
def Quantizer(x, f, type = 'floor', clip = True):
    G = tf.compat.v1.get_default_graph()
    i = 1
    max = float(2 ** (i - 1) - 2 ** (-(f-1)))
    min = float(-2 ** (i - 1))
    n = float(2 ** (f-1) )
    if type == 'round':
        with G.gradient_override_map({"Round": "Identity"}):
              x=tf.round(x * n)/n
    elif type == 'floor':
        with G.gradient_override_map({"Floor": "Identity"}):
             x=tf.floor(x * n)/n
    if clip:
        x = K.clip(x, min_value=min, max_value=max)
    return x
		

#===================================================================================
def QuantizerWeight(x, f, type = 'floor', clip = True):
    
    x = x * 2
    # G = tf.get_default_graph()
    G = tf.compat.v1.get_default_graph()
    i = 1
    max = float(2 ** (i - 1) - 2 ** (-(f-1)))
    min = float(-2 ** (i - 1))
    n = float(2 ** (f-1) )
    if type == 'round':
        with G.gradient_override_map({"Round": "Identity"}):
             x=tf.round(x * n)/n
    elif type == 'floor':
        with G.gradient_override_map({"Floor": "Identity"}):
             x=tf.floor(x * n)/n
    if clip:
        x = K.clip(x, min_value=min, max_value=max)
    return x    
